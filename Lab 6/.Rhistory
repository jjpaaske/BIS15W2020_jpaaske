max_log10.mass=max(log10.mass),
mean_log10.mass=mean(log10.mass),
median_log10.mass=median(log10.mass))
homerange %>%
ggplot(aes(x = class, y = log10.mass)) +
geom_boxplot()
homerange %>%
group_by(trophic.guild) %>%
summarize(min_log10.mass=min(log10.mass),
max_log10.mass=max(log10.mass),
mean_log10.mass=mean(log10.mass),
median_log10.mass=median(log10.mass),
n = n())
homerange %>%
ggplot(aes(x = trophic.guild, y = log10.mass)) +
geom_boxplot()
homerange %>%
filter(taxon == "mammals" & trophic.guild == "carnivore") %>%
group_by(family) %>%
summarize(min_log10.mass=min(log10.mass),
max_log10.mass=max(log10.mass),
mean_log10.mass=mean(log10.mass),
median_log10.mass=median(log10.mass),
n = n())
homerange %>%
filter(taxon == "mammals" & trophic.guild == "carnivore") %>%
ggplot(aes(x = family, y = log10.mass)) +
geom_boxplot()+
coord_flip()
ggplot(data = homerange, mapping = aes(x = log10.mass, y = log10.hra)) +
geom_point()
ggplot(data = homerange, mapping = aes(x = log10.mass, y = log10.hra)) +
geom_point() +
labs(title = "Mass vs. Homerange",
x = "Mass (log10)",
y = "Homerange (log10)")
ggplot(data = homerange, mapping = aes(x = log10.mass, y = log10.hra)) +
geom_point() +
labs(title = "Mass vs. Homerange",
x = "Mass (log10)",
y = "Homerange (log10)")+
theme(plot.title = element_text(size = 18, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12))
ggplot(data = homerange, mapping = aes(x = log10.mass, y = log10.hra)) +
geom_point() +
labs(title = "Mass vs. Homerange",
x = "Mass (log10)",
y = "Homerange (log10)")+
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))
homerange %>%
ggplot(aes(x = locomotion, fill = locomotion)) +
geom_bar() +
labs(title = "Number of Individuals by Locomotion Type",
x = "Locomotion Type",
y = "Number of Individuals")+
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))
homerange %>%
ggplot(aes(x = log10.mass, y = log10.hra, color = locomotion)) +
geom_point()
homerange %>%
ggplot(aes(x = log10.mass, y = log10.hra)) +
geom_point(color = "orange")
options(scipen = 999) #disable scientific notation
homerange %>%
ggplot(aes(x = log10.mass, y = log10.hra, size = mean.mass.g)) +
geom_point()
homerange %>%
ggplot(aes(x = class, y = log10.mass, group = taxon, fill = taxon)) +
geom_boxplot()
homerange %>%
ggplot(aes(x = thermoregulation, fill = thermoregulation)) +
geom_bar(alpha = 0.8) +
labs(title = "Number of Indiduals by Thermoregulation Type",
x = "Thermoregulation Type",
y = NULL)+
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))
homerange %>%
ggplot(aes(x = thermoregulation, y = log10.mass, fill = class)) +
geom_boxplot(alpha = 0.8) +
labs(title = "Number of Indiduals by Thermoregulation Type and Class",
x = "Thermoregulation Type",
y = "Number of Individuals")+
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))
install.packages("skimr")
#install.packages("naniar")
#install.packages("skimr")
library("tidyverse")
library("naniar")
library("skimr")
life_history <-
readr::read_csv("data/mammal_lifehistories_v2.csv")
life_history
?msleep
glimpse(msleep)
is.na(msleep)
msleep %>%
summarize(number_nas = sum(is.na(msleep)))
msleep %>%
summarize(number_nas = sum(is.na(conservation)))
summary(msleep)
import_export <- readr::read_csv("data/import_export.csv")
is.na(import_export)
import_export %>%
summarize(number_nas = sum(is.na(import_export)))
msleep %>%
purrr::map_df(~ sum(is.na(.))) #map to a new data frame the sum results of the is.na function for all columns
msleep %>%
purrr::map_df(~ sum(is.na(.))) %>%
pivot_longer(everything(),
names_to= "variables",
values_to = "num_nas") %>%
arrange(desc(num_nas))
msleep %>%
count(conservation)
msleep %>%
count(conservation, sort = TRUE)
msleep %>%
na_if("-999")
msleep %>%
mutate(conservation = na_if(conservation, "domesticated"))%>%
count(conservation, sort = TRUE) #previously there were only 29 NAs
life_history <-
life_history %>%
dplyr::rename(
genus        = Genus,
wean_mass    = `wean mass`,
max_life     = `max. life`,
litter_size  = `litter size`,
litters_yr   = `litters/year`
)
life_history %>%
skimr::skim()
life_history %>%
summarize(number_nas = sum(is.na(life_history)))
life_history2 <-
life_history %>%
na_if("-999")
life_history2 %>%
summarize(number_nas = sum(is.na(life_history2)))
life_history2 %>%
purrr::map_df(~ sum(is.na(.))) %>%
pivot_longer(everything(),
names_to= "variables",
values_to = "num_nas") %>%
arrange(desc(num_nas))
naniar::miss_var_summary(life_history2)
life_history2 %>%
group_by(order) %>%
select(order, wean_mass) %>%
naniar::miss_var_summary(order=T)
life_history %>%
naniar::replace_with_na(replace = list(newborn = -999))
life_history %>%
naniar::replace_with_na(replace = list(newborn = -999, weaning= -999))
#install.packages("visdat)
library(visdat)
vis_dat(life_history2) #classes of data
vis_miss(life_history2)
life_history3 <-
readr::read_csv(file = "data/mammal_lifehistories_v2.csv",
na = c("NA", " ", ".", "-999")) #all NA, blank spaces, .,and -999 are treated as NA
library(tidyverse)
library(naniar)
?iris
names(iris)
glimpse(iris)
ggplot(data = iris, mapping = aes(x = Species, y = Petal.Length))
ggplot(data = iris, mapping = aes(x = Species, y = Petal.Length)) +
geom_boxplot()
ggplot(data = iris, mapping = aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point()
homerange <-
readr::read_csv("data/Tamburelloetal_HomeRangeDatabase.csv")
naniar::miss_var_summary(homerange)
ggplot(data = homerange, mapping = aes(x = log10.mass, y = log10.hra)) +
geom_point()
ggplot(data = homerange, mapping = aes(x = log10.mass, y = log10.hra)) +
geom_jitter()
ggplot(data=homerange, mapping=aes(x=log10.mass, y=log10.hra)) +
geom_jitter()+
geom_smooth(method=lm, se=F) #adds the regression line, `se=TRUE` will add standard error
ggplot(data=homerange, mapping=aes(x=log10.hra, y=log10.preymass)) +
geom_jitter()+
geom_smooth(method=lm, se=F)
ggplot(data=homerange, mapping=aes(x=taxon, y=log10.preymass)) +
geom_point(na.rm = T)
homerange %>%
ggplot(aes(x = trophic.guild))+
geom_bar(stat = "count")
homerange %>%
group_by(class) %>%
summarize(mean_body_wt = mean(log10.mass)) %>%
ggplot(aes(x = class, y = mean_body_wt)) +
geom_bar(stat = "identity")
homerange2<- homerange %>%
filter(taxon == "mammals")
homerange2
homerange2 %>%
group_by(trophic.guild) %>%
count() %>%
ggplot(aes(x = trophic.guild, y = n)) +
geom_bar(stat = "identity")
homerange2 %>%
arrange(mean.mass.g) %>%
top_n(-10, mean.mass.g) %>%
ggplot(aes(x = common.name, y = mean.mass.g)) +
geom_bar(stat = "identity")+
coord_flip()
ui <- dashboardPage(
dashboardHeader(title = "Plot Gabon App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("y", "Select Taxonomic Guild", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
), # close the first box
box(title = "Plot of Gabon Data", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = "Distance", y = input$y)) + geom_point() + theme_light(base_size = 18)+geom_smooth(method=lm, se=T)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot Gabon App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("y", "Select Taxonomic Guild", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
), # close the first box
box(title = "Plot of Gabon Data", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = "Distance", y = input$y)) + geom_point() + theme_light(base_size = 18)+geom_smooth(method=lm, se=T) +labs(x = "Distance to Nearest Village (km)",
y = "Relative Abundance (%)")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot Gabon App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("y", "Select Taxonomic Guild", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
), # close the first box
box(title = "Distance to Nearest Village vs. Relative Abundance", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = "Distance", y = input$y)) + geom_point() + theme_light(base_size = 18)+geom_smooth(method=lm, se=T) +labs(x = "Distance to Nearest Village (km)",
y = "Relative Abundance (%)")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot Gabon App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("y", "Select Taxonomic Guild", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
), # close the first box
box(title = "Distance to Nearest Village vs. Relative Abundance", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = "Distance", y = input$y)) + geom_point(base_size = 2) + theme_light(base_size = 18)+geom_smooth(method=lm, se=T) +labs(x = "Distance to Nearest Village (km)",
y = "Relative Abundance (%)")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot Gabon App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("y", "Select Taxonomic Guild", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
), # close the first box
box(title = "Distance to Nearest Village vs. Relative Abundance", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = "Distance", y = input$y)) + geom_point(base_size = 2) + theme_light(base_size = 18)+geom_smooth(method=lm, se=T) +labs(x = "Distance to Nearest Village (km)",
y = "Relative Abundance (%)")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot Gabon App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("y", "Select Taxonomic Guild", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
), # close the first box
box(title = "Distance to Nearest Village vs. Relative Abundance", width = 15,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = "Distance", y = input$y)) + geom_point(base_size = 2) + theme_light(base_size = 18)+geom_smooth(method=lm, se=T) +labs(x = "Distance to Nearest Village (km)",
y = "Relative Abundance (%)")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot Gabon App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("y", "Select Taxonomic Guild", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
), # close the first box
box(title = "Distance to Nearest Village vs. Relative Abundance", width = 10,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = "Distance", y = input$y)) + geom_point(base_size = 2) + theme_light(base_size = 18)+geom_smooth(method=lm, se=T) +labs(x = "Distance to Nearest Village (km)",
y = "Relative Abundance (%)")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot Gabon App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("y", "Select Taxonomic Guild", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
), # close the first box
box(title = "Distance to Nearest Village vs. Relative Abundance", width = 12,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = "Distance", y = input$y)) + geom_point(base_size = 2) + theme_light(base_size = 18)+geom_smooth(method=lm, se=T) +labs(x = "Distance to Nearest Village (km)",
y = "Relative Abundance (%)")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot Gabon App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("y", "Select Taxonomic Guild", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
), # close the first box
box(title = "Distance to Nearest Village vs. Relative Abundance", width = 12,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = "Distance", y = input$y)) + geom_point(base_size = 2) + theme_light(base_size = 18)+geom_smooth(method=lm, se=T) +labs(x = "Distance to Nearest Village (km)",
y = "Relative Abundance (%)")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot Gabon App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("y", "Select Taxonomic Guild", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
), # close the first box
box(title = "Distance to Nearest Village vs. Relative Abundance", width = 12,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = "Distance", y = input$y)) + geom_point(base_size = 2) + theme_light(base_size = 18)+geom_smooth(method=lm, se=T) +labs(x = "Distance to Nearest Village (km)",
y = "Relative Abundance (%)") + stat_poly_eq(formula = my.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot Gabon App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("y", "Select Taxonomic Guild", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
), # close the first box
box(title = "Distance to Nearest Village vs. Relative Abundance", width = 12,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = "Distance", y = input$y)) + geom_point(base_size = 2) + theme_light(base_size = 18)+geom_smooth(method=lm, se=T, formula = my.formula)+ stat_poly_eq(formula = my.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +labs(x = "Distance to Nearest Village (km)",
y = "Relative Abundance (%)")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot Gabon App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("y", "Select Taxonomic Guild", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
), # close the first box
box(title = "Distance to Nearest Village vs. Relative Abundance", width = 12,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = "Distance", y = input$y)) + geom_point(base_size = 2) + theme_light(base_size = 18)+geom_smooth(method=lm, se=T)+ labs(x = "Distance to Nearest Village (km)",
y = "Relative Abundance (%)")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
