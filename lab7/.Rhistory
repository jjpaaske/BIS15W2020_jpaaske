})
output$plot <- renderPlot({
if(input$y=="Clustered"){
UC_admit %>%
group_by(Ethnicity, Academic_Yr, Campus, Category) %>%
filter(Ethnicity != "All") %>%
summarise(sum = sum(FilteredCountFR)) %>%
ggplot(aes_string(x = "Academic_Yr", y = "sum", fill = input$x))+ theme(axis.text.x =
element_text(size  = 10,
angle = 45,
hjust = 1,
vjust = 1)) + geom_bar(stat = "identity", position = "dodge") + labs(x = "Academic Year",
y = "Filtered Count FR")
}
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot UC App"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select Fill", choices = c("Campus", "Ethnicity", "Category"),
selected = "Campus"),
selectInput("y", "Would you like a stacked or clustered bar graph?", choices = c("Stacked", "Clustered"),
selected = "Stacked"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
# the code to make the plot of UC data with fill as the choice.
output$plot <- renderPlot({
if(input$y=="Stacked"){
UC_admit %>%
group_by(Ethnicity, Academic_Yr, Campus, Category) %>%
filter(Ethnicity != "All") %>%
summarise(sum = sum(FilteredCountFR)) %>%
ggplot(aes_string(x = "Academic_Yr", y = "sum", fill = input$x))+ theme(axis.text.x =
element_text(size  = 10,
angle = 45,
hjust = 1,
vjust = 1)) + geom_bar(stat = "identity") + labs(x = "Academic Year",
y = "Filtered Count FR")
})
ui <- dashboardPage(
dashboardHeader(title = "Plot UC App"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select Fill", choices = c("Campus", "Ethnicity", "Category"),
selected = "Campus"),
selectInput("y", "Would you like a stacked or clustered bar graph?", choices = c("Stacked", "Clustered"),
selected = "Stacked"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
# the code to make the plot of UC data with fill as the choice.
output$plot <- renderPlot({
if(input$y=="Stacked"){
UC_admit %>%
group_by(Ethnicity, Academic_Yr, Campus, Category) %>%
filter(Ethnicity != "All") %>%
summarise(sum = sum(FilteredCountFR)) %>%
ggplot(aes_string(x = "Academic_Yr", y = "sum", fill = input$x))+ theme(axis.text.x =
element_text(size  = 10,
angle = 45,
hjust = 1,
vjust = 1)) + geom_bar(stat = "identity") + labs(x = "Academic Year",
y = "Filtered Count FR")
}
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot UC App"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select Fill", choices = c("Campus", "Ethnicity", "Category"),
selected = "Campus"),
selectInput("y", "Would you like a stacked or clustered bar graph?", choices = c("Stacked", "Clustered"),
selected = "Stacked"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
# the code to make the plot of UC data with fill as the choice.
output$plot <- renderPlot({
if(input$y=="Stacked"){
UC_admit %>%
group_by(Ethnicity, Academic_Yr, Campus, Category) %>%
filter(Ethnicity != "All") %>%
summarise(sum = sum(FilteredCountFR)) %>%
ggplot(aes_string(x = "Academic_Yr", y = "sum", fill = input$x))+ theme(axis.text.x =
element_text(size  = 10,
angle = 45,
hjust = 1,
vjust = 1)) + geom_bar(stat = "identity") + labs(x = "Academic Year",
y = "Filtered Count FR")
}
if(input$y=="Clustered"){
UC_admit %>%
group_by(Ethnicity, Academic_Yr, Campus, Category) %>%
filter(Ethnicity != "All") %>%
summarise(sum = sum(FilteredCountFR)) %>%
ggplot(aes_string(x = "Academic_Yr", y = "sum", fill = input$x))+ theme(axis.text.x =
element_text(size  = 10,
angle = 45,
hjust = 1,
vjust = 1)) + geom_bar(stat = "identity", position = "dodge") + labs(x = "Academic Year",
y = "Filtered Count FR")
}
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot UC App"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select Fill", choices = c("Campus", "Ethnicity", "Category"),
selected = "Campus"),
selectInput("y", "Would you like a stacked or clustered bar graph?", choices = c("Stacked", "Clustered"),
selected = "Stacked"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
# the code to make the plot of UC data with fill as the choice.
output$plot <- renderPlot({
if(input$y=="Stacked"){
UC_admit %>%
group_by(Ethnicity, Academic_Yr, Campus, Category) %>%
filter(Ethnicity != "All") %>%
summarise(sum = sum(FilteredCountFR)) %>%
ggplot(aes_string(x = "Academic_Yr", y = "sum", fill = input$x))+ theme(axis.text.x =
element_text(size  = 10,
angle = 45,
hjust = 1,
vjust = 1)) + geom_bar(stat = "identity") + labs(x = "Academic Year",
y = "Filtered Count FR")
}
else{
UC_admit %>%
group_by(Ethnicity, Academic_Yr, Campus, Category) %>%
filter(Ethnicity != "All") %>%
summarise(sum = sum(FilteredCountFR)) %>%
ggplot(aes_string(x = "Academic_Yr", y = "sum", fill = input$x))+ theme(axis.text.x =
element_text(size  = 10,
angle = 45,
hjust = 1,
vjust = 1)) + geom_bar(stat = "identity", position = "dodge") + labs(x = "Academic Year",
y = "Filtered Count FR")
}
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot UC App"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select Fill", choices = c("Campus", "Ethnicity", "Category"),
selected = "Campus"),
radioButtons("y", "Would you like a stacked or clustered bar graph?", choices = c("Stacked", "Clustered"),
selected = "Stacked"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
# the code to make the plot of UC data with fill as the choice.
output$plot <- renderPlot({
if(input$y=="Stacked"){
UC_admit %>%
group_by(Ethnicity, Academic_Yr, Campus, Category) %>%
filter(Ethnicity != "All") %>%
summarise(sum = sum(FilteredCountFR)) %>%
ggplot(aes_string(x = "Academic_Yr", y = "sum", fill = input$x))+ theme(axis.text.x =
element_text(size  = 10,
angle = 45,
hjust = 1,
vjust = 1)) + geom_bar(stat = "identity") + labs(x = "Academic Year",
y = "Filtered Count FR")
}
else{
UC_admit %>%
group_by(Ethnicity, Academic_Yr, Campus, Category) %>%
filter(Ethnicity != "All") %>%
summarise(sum = sum(FilteredCountFR)) %>%
ggplot(aes_string(x = "Academic_Yr", y = "sum", fill = input$x))+ theme(axis.text.x =
element_text(size  = 10,
angle = 45,
hjust = 1,
vjust = 1)) + geom_bar(stat = "identity", position = "dodge") + labs(x = "Academic Year",
y = "Filtered Count FR")
}
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot UC App"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select Fill", choices = c("Campus", "Ethnicity", "Category"),
selected = "Campus"),
radioButtons("y", "Would you like a stacked or clustered bar graph?", choices = c("Stacked", "Clustered"),
selected = "Stacked"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
# the code to make the plot of UC data with fill as the choice.
output$plot <- renderPlot({
if(input$y=="Stacked"){
UC_admit %>%
group_by(Ethnicity, Academic_Yr, Campus, Category) %>%
filter(Ethnicity != "All") %>%
summarise(sum = sum(FilteredCountFR)) %>%
ggplot(aes_string(x = "Academic_Yr", y = "sum", fill = input$x))+ theme(axis.text.x =
element_text(size  = 10,
angle = 45,
hjust = 1,
vjust = 1)) + geom_bar(stat = "identity") + labs(x = "Academic Year",
y = "Filtered Count FR")
}
else{
UC_admit %>%
group_by(Ethnicity, Academic_Yr, Campus, Category) %>%
filter(Ethnicity != "All") %>%
summarise(sum = sum(FilteredCountFR)) %>%
ggplot(aes_string(x = "Academic_Yr", y = "sum", fill = input$x))+ theme(axis.text.x =
element_text(size  = 10,
angle = 45,
hjust = 1,
vjust = 1)) + geom_bar(stat = "identity", position = "dodge") + labs(x = "Academic Year",
y = "Filtered Count FR")
}
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(shiny)
library(shinydashboard)
UC_admit <- readr::read_csv("data/UC_admit.csv") %>%
mutate_at(vars(Ethnicity), as.factor) %>%
mutate_at(vars(Academic_Yr), as.factor)
names(UC_admit)
dim(UC_admit)
glimpse(UC_admit)
naniar::miss_var_summary(UC_admit)
ui <- dashboardPage(
dashboardHeader(title = "Plot UC App"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select Fill", choices = c("Campus", "Academic_Yr", "Category"),
selected = "Campus"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
# the code to make the plot of UC data with fill as the choice.
output$plot <- renderPlot({
UC_admit %>%
group_by(Ethnicity, Academic_Yr, Campus, Category) %>%
summarise(sum = sum(FilteredCountFR)) %>%
ggplot(aes_string(x = "Ethnicity", y = "sum", fill = input$x))+ theme(axis.text.x =
element_text(size  = 10,
angle = 45,
hjust = 1,
vjust = 1)) + geom_bar(stat = "identity") + labs(x = "Ethnicity",
y = "Filtered Count FR")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot UC App"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select Fill", choices = c("Campus", "Ethnicity", "Category"),
selected = "Campus"),
radioButtons("y", "Would you like a stacked or clustered bar graph?", choices = c("Stacked", "Clustered"),
selected = "Stacked"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
# the code to make the plot of UC data with fill as the choice.
output$plot <- renderPlot({
if(input$y=="Stacked"){
UC_admit %>%
group_by(Ethnicity, Academic_Yr, Campus, Category) %>%
filter(Ethnicity != "All") %>%
summarise(sum = sum(FilteredCountFR)) %>%
ggplot(aes_string(x = "Academic_Yr", y = "sum", fill = input$x))+ theme(axis.text.x =
element_text(size  = 10,
angle = 45,
hjust = 1,
vjust = 1)) + geom_bar(stat = "identity") + labs(x = "Academic Year",
y = "Filtered Count FR")
}
else{
UC_admit %>%
group_by(Ethnicity, Academic_Yr, Campus, Category) %>%
filter(Ethnicity != "All") %>%
summarise(sum = sum(FilteredCountFR)) %>%
ggplot(aes_string(x = "Academic_Yr", y = "sum", fill = input$x))+ theme(axis.text.x =
element_text(size  = 10,
angle = 45,
hjust = 1,
vjust = 1)) + geom_bar(stat = "identity", position = "dodge") + labs(x = "Academic Year",
y = "Filtered Count FR")
}
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot UC App"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select Fill", choices = c("Campus", "Academic_Yr", "Category"),
selected = "Campus"),
radioButtons("y", "Would you like a stacked or clustered bar graph?", choices = c("Stacked", "Clustered"),
selected = "Stacked"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
# the code to make the plot of UC data with fill as the choice.
output$plot <- renderPlot({
if(input$y=="Stacked"){
UC_admit %>%
ggplot(aes_string(x = "Ethnicity", y = "FilteredCountFR", fill = input$x))+ theme(axis.text.x =
element_text(size  = 10,
angle = 45,
hjust = 1,
vjust = 1)) + geom_bar(stat = "identity") + labs(x = "Academic Year",
y = "Filtered Count FR")
}
else{
UC_admit %>%
ggplot(aes_string(x = "Ethnicity", y = "FilteredCountFR", fill = input$x))+ theme(axis.text.x =
element_text(size  = 10,
angle = 45,
hjust = 1,
vjust = 1)) + geom_bar(stat = "identity", position = "dodge") + labs(x = "Academic Year",
y = "Filtered Count FR")
}
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot UC App"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select Fill", choices = c("Campus", "Academic_Yr", "Category"),
selected = "Campus"),
radioButtons("y", "Would you like a stacked or clustered bar graph?", choices = c("Stacked", "Clustered"),
selected = "Stacked"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
# the code to make the plot of UC data with fill as the choice.
output$plot <- renderPlot({
if(input$y=="Stacked"){
UC_admit %>%
ggplot(aes_string(x = "Ethnicity", y = "FilteredCountFR", fill = input$x))+ theme(axis.text.x =
element_text(size  = 10,
angle = 45,
hjust = 1,
vjust = 1)) + geom_bar(stat = "identity") + labs(x = "Academic Year",
y = "Filtered Count FR")
}
else{
UC_admit %>%
ggplot(aes_string(x = "Ethnicity", y = "FilteredCountFR", fill = input$x))+ theme(axis.text.x =
element_text(size  = 10,
angle = 45,
hjust = 1,
vjust = 1)) + geom_bar(stat = "identity", position = "dodge") + labs(x = "Academic Year",
y = "Filtered Count FR")
}
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot UC App"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select Fill", choices = c("Campus", "Ethnicity", "Category"),
selected = "Campus"),
radioButtons("y", "Would you like a bar graph or line graph?", choices = c("Bar", "Line"),
selected = "Bar"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
# the code to make the plot of UC data with fill as the choice.
output$plot <- renderPlot({
if(input$y=="Bar"){
UC_admit %>%
group_by(Ethnicity, Academic_Yr, Campus, Category) %>%
filter(Ethnicity != "All") %>%
summarise(sum = sum(FilteredCountFR)) %>%
ggplot(aes_string(x = "Academic_Yr", y = "sum", fill = input$x))+ theme(axis.text.x =
element_text(size  = 10,
angle = 45,
hjust = 1,
vjust = 1)) + geom_bar(stat = "identity") + labs(x = "Academic Year",
y = "Filtered Count FR")
}
else{
UC_admit %>%
group_by(Ethnicity, Academic_Yr, Campus, Category) %>%
filter(Ethnicity != "All") %>%
summarise(sum = sum(FilteredCountFR)) %>%
ggplot(aes_string(x = "Academic_Yr", y = "sum", col = input$x))+ theme(axis.text.x =
element_text(size  = 10,
angle = 45,
hjust = 1,
vjust = 1)) + geom_line() + labs(x = "Academic Year",
y = "Filtered Count FR")
}
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot UC App"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select Fill", choices = c("Campus", "Academic_Yr", "Category"),
selected = "Campus"),
radioButtons("y", "Would you like a stacked or clustered bar graph?", choices = c("Stacked", "Clustered"),
selected = "Stacked"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
# the code to make the plot of UC data with fill as the choice.
output$plot <- renderPlot({
if(input$y=="Stacked"){
UC_admit %>%
ggplot(aes_string(x = "Ethnicity", y = "FilteredCountFR", fill = input$x))+ theme(axis.text.x =
element_text(size  = 10,
angle = 45,
hjust = 1,
vjust = 1)) + geom_bar(stat = "identity") + labs(x = "Academic Year",
y = "Filtered Count FR")
}
else{
UC_admit %>%
ggplot(aes_string(x = "Ethnicity", y = "FilteredCountFR", fill = input$x))+ theme(axis.text.x =
element_text(size  = 10,
angle = 45,
hjust = 1,
vjust = 1)) + geom_bar(stat = "identity", position = "dodge") + labs(x = "Academic Year",
y = "Filtered Count FR")
}
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot UC App"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select Fill", choices = c("Campus", "Ethnicity", "Category"),
selected = "Campus"),
radioButtons("y", "Would you like a stacked or clustered bar graph?", choices = c("Stacked", "Clustered"),
selected = "Stacked"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
# the code to make the plot of UC data with fill as the choice.
output$plot <- renderPlot({
if(input$y=="Stacked"){
UC_admit %>%
group_by(Ethnicity, Academic_Yr, Campus, Category) %>%
filter(Ethnicity != "All") %>%
summarise(sum = sum(FilteredCountFR)) %>%
ggplot(aes_string(x = "Academic_Yr", y = "sum", fill = input$x))+ theme(axis.text.x =
element_text(size  = 10,
angle = 45,
hjust = 1,
vjust = 1)) + geom_bar(stat = "identity") + labs(x = "Academic Year",
y = "Filtered Count FR")
}
else{
UC_admit %>%
group_by(Ethnicity, Academic_Yr, Campus, Category) %>%
filter(Ethnicity != "All") %>%
summarise(sum = sum(FilteredCountFR)) %>%
ggplot(aes_string(x = "Academic_Yr", y = "sum", fill = input$x))+ theme(axis.text.x =
element_text(size  = 10,
angle = 45,
hjust = 1,
vjust = 1)) + geom_bar(stat = "identity", position = "dodge") + labs(x = "Academic Year",
y = "Filtered Count FR")
}
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
